You said:
I want to build a modular Python program that analyses user-inputted text. It should calculate word count, sentence count, average word length, and word frequency. I also want to include a visualisation (e.g., bar chart) of the most common words. The interface should use pyinputplus for user navigation. What‚Äôs the best way to structure this?

ChatGPT said:
This is a great use case for modular design. You can break this program into multiple components:

get_user_input(): Accepts user-entered text.

clean_text(text): Prepares text by removing punctuation and normalizing case.

calculate_statistics(text): Calculates word count, sentence count, and average word length.

get_word_frequencies(text, top_n): Returns a dictionary of top N most frequent words.

visualise_frequencies(freq_dict): Displays a bar chart using matplotlib.

main_menu(): Handles menu-based navigation using pyinputplus."

Reflection:
This prompt helped establish the program‚Äôs structure and showed how I could split it into reusable functions. It also confirmed the use of matplotlib for visualisation and pyinputplus for menu interaction. This gives me a clear structure to follow in my pseudocode.

üß† Now, Let‚Äôs Write the Pseudocode Together
Here‚Äôs a solid starting point for your pseudocode based on that response:

üßæ Pseudocode: Text Analysis Tool
plaintext
Copy
Edit
MAIN MENU:
    - Display options using pyinputplus:
        1. Enter new text
        2. Show text statistics
        3. Show top word frequencies
        4. Visualise word frequencies
        5. Exit

FUNCTION: get_user_input()
    - Ask user for multiline input
    - Return text string

FUNCTION: clean_text(text)
    - Convert text to lowercase
    - Remove punctuation
    - Return cleaned text

FUNCTION: calculate_statistics(cleaned_text)
    - Count total words
    - Count sentences (split by ".", "!", "?")
    - Calculate average word length
    - Return stats as dictionary

FUNCTION: get_word_frequencies(cleaned_text, top_n)
    - Split text into words
    - Use Counter to count word frequency
    - Return top N as dictionary

FUNCTION: visualise_frequencies(freq_dict)
    - Plot bar chart of word frequencies using matplotlib

MAIN FUNCTION:
    - Call main_menu()
    - Use while loop to keep the program running until "Exit" is selected
‚úÖ Next Steps
Let‚Äôs now move on to implementing this pseudocode in Python, starting with:

get_user_input()

clean_text(text)

calculate_statistics(text)

Would you like me to generate the code for these first three functions with detailed comments?

You said:
yes


ChatGPT said:
Awesome! Let‚Äôs begin by turning your pseudocode into clean, well-documented Python functions. These will go into your Colab notebook or a text_stats.py module if you're keeping it modular.

üß© Function 1: get_user_input()
We'll use pyinputplus to ask the user for a block of text.

python
Copy
Edit
import pyinputplus as pyip

def get_user_input():
    print("\nPlease enter your text below (press Enter twice to finish):")
    lines = []
    while True:
        line = input()
        if line == "":
            break
        lines.append(line)
    return " ".join(lines)
üßπ Function 2: clean_text(text)
This removes punctuation and normalizes the case.

python
Copy
Edit
import re

def clean_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove punctuation using regex
    text = re.sub(r'[^\w\s]', '', text)
    return text
üìä Function 3: calculate_statistics(text)
This calculates basic statistics from the cleaned text.

python
Copy
Edit
def calculate_statistics(cleaned_text):
    words = cleaned_text.split()
    word_count = len(words)

    # Basic sentence count: count '.', '!' or '?' in original text
    # (Assume original text is available, not cleaned one)
    sentence_count = len(re.findall(r'[.!?]', cleaned_text))

    # Calculate average word length
    if word_count > 0:
        avg_word_len = sum(len(word) for word in words) / word_count
    else:
        avg_word_len = 0

    return {
        'word_count': word_count,
        'sentence_count': sentence_count,
        'average_word_length': round(avg_word_len, 2)
    }
‚úÖ Next Steps:
We‚Äôll add get_word_frequencies(text, top_n)

Then create visualise_frequencies(freq_dict)

After that, we‚Äôll build a simple main_menu() using pyinputplus.

Would you like to continue with the word frequency and visualisation functions next?







You said:
yes


ChatGPT said:
Perfect ‚Äî let‚Äôs add the next two key functions: word frequency calculation and data visualisation.

üî¢ Function 4: get_word_frequencies(cleaned_text, top_n)
This uses collections.Counter to find the most common words.

python
Copy
Edit
from collections import Counter

def get_word_frequencies(cleaned_text, top_n=10):
    words = cleaned_text.split()
    word_counts = Counter(words)
    most_common = word_counts.most_common(top_n)
    # Convert to dictionary for easy plotting
    return dict(most_common)
üîç Note: You can let the user choose top_n later from the menu (e.g., top 5, top 10, etc.).

üìà Function 5: visualise_frequencies(freq_dict)
This visualises the frequency dictionary using matplotlib.

python
Copy
Edit
import matplotlib.pyplot as plt

def visualise_frequencies(freq_dict):
    if not freq_dict:
        print("No data to display.")
        return

    words = list(freq_dict.keys())
    counts = list(freq_dict.values())

    plt.figure(figsize=(10, 6))
    plt.bar(words, counts, color='skyblue')
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.title('Top Word Frequencies')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
‚úÖ Summary So Far
You now have:

get_user_input() ‚úÖ

clean_text(text) ‚úÖ

calculate_statistics(text) ‚úÖ

get_word_frequencies(text, top_n) ‚úÖ

visualise_frequencies(freq_dict) ‚úÖ

‚û°Ô∏è Next: Build the main_menu() Loop
Would you like help now with creating the console interface using pyinputplus to bring all this together interactively?







You said:
yes


ChatGPT said:
Awesome ‚Äî let‚Äôs bring everything together now with the main_menu() function using pyinputplus. This will let the user navigate the app from the console.

üß≠ main_menu() with pyinputplus
python
Copy
Edit
import pyinputplus as pyip

def main_menu():
    user_text = ""
    cleaned = ""
    stats = {}
    freq_dict = {}

    while True:
        print("\nüìä TEXT ANALYSIS TOOL MENU")
        choice = pyip.inputMenu([
            '1. Enter new text',
            '2. Show text statistics',
            '3. Show top word frequencies',
            '4. Visualise word frequencies',
            '5. Exit'
        ], numbered=True)

        if choice.startswith('1'):
            user_text = get_user_input()
            cleaned = clean_text(user_text)
            stats = calculate_statistics(cleaned)
            freq_dict = get_word_frequencies(cleaned, top_n=10)
            print("‚úÖ Text saved and analysed!")

        elif choice.startswith('2'):
            if not user_text:
                print("‚ö†Ô∏è No text entered yet. Please enter text first.")
            else:
                print("\nüìã Text Statistics:")
                for key, value in stats.items():
                    print(f"{key.replace('_', ' ').capitalize()}: {value}")

        elif choice.startswith('3'):
            if not freq_dict:
                print("‚ö†Ô∏è No frequency data available. Please enter text first.")
            else:
                print("\nüî¢ Top Word Frequencies:")
                for word, count in freq_dict.items():
                    print(f"{word}: {count}")

        elif choice.startswith('4'):
            visualise_frequencies(freq_dict)

        elif choice.startswith('5'):
            print("üëã Exiting program. Goodbye!")
            break